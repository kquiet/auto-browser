name: continuous-delivery-staging
on:
  workflow_dispatch:
jobs:
  precheck:
    if: github.ref_type == 'branch' && (github.ref_name == 'dev' || github.ref_name == 'master' || startsWith(github.ref_name, 'release/') || startsWith(github.ref_name, 'hotfix/'))
    runs-on: ubuntu-latest
    outputs:
      target-branch: ${{ steps.output-target-branch.outputs.target-branch }}
    steps:
    - uses: actions/checkout@v3
    - name: Check pom version
      id: check-pom-version
      run: |
        MAVEN_PROJECT_VERSION=`mvn help:evaluate -Dexpression=project.version -q -DforceStdout`
        echo "maven pom version: $MAVEN_PROJECT_VERSION"
        
        if [[ "${{ github.ref_name }}" == "dev" ]]
        then
          REG_OPTION="-SNAPSHOT"
        fi

        if [[ ! "$MAVEN_PROJECT_VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$REG_OPTION$ ]]
        then
          echo "maven pom version of ${{ github.ref_name }} doesn't match '""^[0-9]+\.[0-9]+\.[0-9]+$REG_OPTION$'!!!"
          exit 1
        fi

        if [[ (! "${{ github.ref_name }}" == "dev") && (! "${{ github.ref_name }}" == "master") && (! "${{ github.ref_name }}" =~ $MAVEN_PROJECT_VERSION$)]]
        then
          echo "branch naming:${{ github.ref_name }} doesn't match with maven pom version!!!"
          exit 1
        fi
        
        echo "::set-output name=pom-version::$MAVEN_PROJECT_VERSION"
    - name: If dev => create release branch, and set target branch
      if: github.ref_name == 'dev'
      run: |
        git config --global user.name 'github-actions[bot]'
        git config --global user.email '41898282+github-actions[bot]@users.noreply.github.com'

        RELEASE_VERSION=`echo ${{ steps.check-pom-version.output.pom-version }}|sed "s/-SNAPSHOT//"`
        SCM_TAG="`mvn help:evaluate -Dexpression=project.artifactId -q -DforceStdout`-$RELEASE_VERSION"
        RELEASE_BRANCH="release/$RELEASE_VERSION"
        git checkout -b "$RELEASE_BRANCH"
        mvn versions:set versions:set-scm-tag -DgenerateBackupPoms=false -DnewVersion="$RELEASE_VERSION" -DnewTag="$SCM_TAG"
        git commit -am "[staging] prepare release $SCM_TAG"

        git checkout dev
        mvn versions:set -DgenerateBackupPoms=false -DnextSnapshot=true
        NEXT_SNAPSHOT_VERSION=`mvn help:evaluate -Dexpression=project.version -q -DforceStdout`
        git commit -am "[staging] prepare for next development iteration $NEXT_SNAPSHOT_VERSION"

        git push --atomic origin dev $RELEASE_BRANCH
        echo -n "$RELEASE_BRANCH" > ${{ runner.temp }}/TARGET_BRANCH
    - name: If master => create hotfix branch, and set target branch
      if: github.ref_name == 'master'
      run: |
        git config --global user.name 'github-actions[bot]'
        git config --global user.email '41898282+github-actions[bot]@users.noreply.github.com'

        HOTFIX_VERSION=`mvn versions:set -DgenerateBackupPoms=false -DnextSnapshot=true > /dev/null \
          && mvn versions:set -DgenerateBackupPoms=false -DremoveSnapshot=true > /dev/null \
          && mvn help:evaluate -Dexpression=project.version -q -DforceStdout`
        SCM_TAG="`mvn help:evaluate -Dexpression=project.artifactId -q -DforceStdout`-$HOTFIX_VERSION"
        HOTFIX_BRANCH="hotfix/$HOTFIX_VERSION"
        git checkout -b "$HOTFIX_BRANCH"
        mvn versions:set-scm-tag -DgenerateBackupPoms=false -DnewTag="$SCM_TAG"
        git commit -am "[staging] prepare hotfix $SCM_TAG"

        git push --atomic origin $HOTFIX_BRANCH
        echo -n "$HOTFIX_BRANCH" > ${{ runner.temp }}/TARGET_BRANCH
    - name: If release/* or hotfix/* => set target branch
      if: startsWith(github.ref_name, 'release/') || startsWith(github.ref_name, 'hotfix/')
      run: |
        echo -n "${{ github.ref_name }}" > ${{ runner.temp }}/TARGET_BRANCH
    - name: Output target branch
      id: output-target-branch
      run: |
        echo "::set-output name=target-branch::`cat ${{ runner.temp }}/TARGET_BRANCH`"
  maven-deploy-staging:
    needs: [precheck]
    runs-on: ubuntu-latest
    concurrency:
      group: delivery-staging-${{ needs.precheck.outputs.target-branch }}
    environment:
      name: maven-repository-staging
      url: https://oss.sonatype.org/
    steps:
    - uses: actions/checkout@v3
      with:
        ref: ${{ needs.precheck.outputs.target-branch }}
    - uses: actions/setup-java@v3
      with:
        java-version: '17'
        java-package: jdk
        architecture: x64
        distribution: 'temurin'
        cache: 'maven'
        server-id: 'ossrh-kquiet'
        server-username: MAVEN_SERVER_USERNAME
        server-password: MAVEN_SERVER_PASSWORD
        gpg-private-key: ${{ secrets.BOT_GPG_PRIVATE_KEY }}
        gpg-passphrase: MAVEN_GPG_PASSPHRASE
    - name: Deploy artifacts to staging repository
      env:
        MAVEN_SERVER_USERNAME: ${{ secrets.OSSRH_USERNAME }}
        MAVEN_SERVER_PASSWORD: ${{ secrets.OSSRH_TOKEN }}
        MAVEN_GPG_PASSPHRASE: ${{ secrets.BOT_GPG_PASSPHRASE }}
      run: |
        mvn clean deploy -B -DskipTests -Darguments=-DskipTests -Prelease
  renew-javadoc:
    needs: [precheck, maven-deploy-staging]
    runs-on: ubuntu-latest
    concurrency:
      group: delivery-staging-${{ needs.precheck.outputs.target-branch }}
    steps:
    - uses: actions/checkout@v3
      with:
        ref: ${{ needs.precheck.outputs.target-branch }}
    - uses: actions/setup-java@v3
      with:
        java-version: '17'
        java-package: jdk
        architecture: x64
        distribution: 'temurin'
        cache: 'maven'
    - name: Update javadoc
      run: |
        mvn javadoc:javadoc
        rm -rf docs
        cp -rf target/site/apidocs/. docs
        if [[ `git status --porcelain` ]]
        then
          git config --global user.name 'github-actions[bot]'
          git config --global user.email '41898282+github-actions[bot]@users.noreply.github.com'
          git add -A
          git commit -m "[staging] update javadoc"
          git push
        fi
  create-pull-request:
    needs: [precheck, maven-deploy-staging, renew-javadoc]
    runs-on: ubuntu-latest
    concurrency:
      group: delivery-staging-${{ needs.precheck.outputs.target-branch }}
    steps:
    - uses: actions/checkout@v3
      with:
        ref: ${{ needs.precheck.outputs.target-branch }}
    - name: Create or comment a pull request based on master
      env:
        GITHUB_TOKEN: ${{ secrets.BOT_ACTION_TOKEN }}
      run: |
        TARGET_VERSION=`echo -n "${{ needs.precheck.outputs.target-branch }}"|sed "s/release\///"|sed "s/hotfix\///"`
        ARTIFACT="`mvn help:evaluate -Dexpression=project.groupId -q -DforceStdout`:`mvn help:evaluate -Dexpression=project.artifactId -q -DforceStdout`:$TARGET_VERSION"
        COMMENT="[staging] artifacts deployed to repository; you can use maven to get: mvn dependency:get -Dartifact=\"$ARTIFACT\" -DremoteRepositories=\"https://oss.sonatype.org/content/groups/staging\""
        OPEN_PR_NUMBER=`gh pr list --limit 1 --state open --base master --head ${{ needs.precheck.outputs.target-branch }} --json number --jq .[0].number`
        if [[ $OPEN_PR_NUMBER != "" ]]
        then
          gh pr comment $OPEN_PR_NUMBER --body "$COMMENT"
        else
          gh pr create --base master --head "${{ needs.precheck.outputs.target-branch }}" --assignee "@me" --title "${{ needs.precheck.outputs.target-branch }} into master" --body "$COMMENT"
        fi