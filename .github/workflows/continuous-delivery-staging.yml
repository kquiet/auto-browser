name: continuous-delivery-staging
on:
  workflow_dispatch:
jobs:
  check-gitflow-and-version:
    if: github.ref_type == 'branch' && startsWith(github.ref_name, 'release/')
    runs-on: ubuntu-latest
    outputs:
      check-result: ${{ steps.check-step.outputs.check-result }}
    steps:
    - uses: actions/checkout@v3
    - name: Check version
      id: check-step
      run: |
        MAVEN_PROJECT_VERSION=`mvn help:evaluate -Dexpression=project.version -q -DforceStdout`
        echo "maven project version: $MAVEN_PROJECT_VERSION"
        COMMIT_COUNT_NOT_IN_DEV=`git rev-list dev..${{ github.ref_name}} --count`
        echo "commt count not in dev: $COMMIT_COUNT_NOT_IN_DEV"
        if [[ $COMMIT_COUNT_NOT_IN_DEV == '0' && "release/$MAVEN_PROJECT_VERSION" =~ ^${{ github.ref_name }}-SNAPSHOT$ ]]
        then
          echo "::set-output name=check-result::pass"
        if
  call-maven-test:
    needs: check-gitflow-and-version
    if: needs.check-gitflow-and-version.outputs.check-result == 'pass'
    uses: ./.github/workflows/maven-test.yml
    with:
      ref: ${{ github.sha }}
    secrets: inherit
  maven-deploy-staging:
    needs: [check-gitflow-and-version, call-maven-test]
    runs-on: ubuntu-latest
    concurrency:
      group: delivery-staging-${{ github.sha }}
    environment:
      name: maven-repository-staging
      url: https://oss.sonatype.org/
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-java@v3
      with:
        java-version: '17'
        java-package: jdk
        architecture: x64
        distribution: 'temurin'
        cache: 'maven'
        server-id: 'ossrh-kquiet'
        server-username: MAVEN_SERVER_USERNAME
        server-password: MAVEN_SERVER_PASSWORD
        gpg-private-key: ${{ secrets.BOT_GPG_PRIVATE_KEY }}
        gpg-passphrase: MAVEN_GPG_PASSPHRASE
    - name: Deploy artifacts to staging repository
      env:
        MAVEN_SERVER_USERNAME: ${{ secrets.OSSRH_USERNAME }}
        MAVEN_SERVER_PASSWORD: ${{ secrets.OSSRH_TOKEN }}
        MAVEN_GPG_PASSPHRASE: ${{ secrets.BOT_GPG_PASSPHRASE }}
      run: |
        git config --global user.name 'github-actions[bot]'
        git config --global user.email '41898282+github-actions[bot]@users.noreply.github.com'
        mvn release:clean release:prepare release:perform -B -DskipTests -Darguments=-DskipTests -Dusername=kquiet -D"password=${{ github.token }}" -Prelease
  renew-javadoc:
    needs: [check-gitflow-and-version, call-maven-test, maven-deploy-staging]
    runs-on: ubuntu-latest
    concurrency:
      group: delivery-staging-${{ github.sha }}
    steps:
    - uses: actions/setup-java@v3
      with:
        java-version: '17'
        java-package: jdk
        architecture: x64
        distribution: 'temurin'
        cache: 'maven'
    - name: Extract target tag for generating javadoc later
      id: extract-target-tag
      run: |
        ARTIFACT_ID=`mvn help:evaluate -Dexpression=project.artifactId -q -DforceStdout`
        echo "::set-output name=target-tag::$ARTIFACT_ID-${{ github.ref_name }}" | sed "s/release\///"
    - uses: actions/checkout@v3
      with:
        ref: ${{ steps.extract-target-tag.outputs.target-tag }}
    - name: Generate javadoc and copy to temporary folders
      run: |
        mvn javadoc:javadoc
        cp -rf target/site/apidocs/. ${{ runner.temp }}/apidocs
    - uses: actions/checkout@v3
      with:
        ref: ${{ github.ref_name }}
    - name: Commit documentation changes
      run: |
        rm -rf docs
        cp -rf ${{ runner.temp }}/apidocs/. docs
        if [[ `git status --porcelain` ]]; then
          git config --global user.name 'github-actions[bot]'
          git config --global user.email '41898282+github-actions[bot]@users.noreply.github.com'
          git add -A
          git commit -m "[github-actions] Automated javadoc updates."
          git push
        fi
  create-pull-request:
    needs: [check-gitflow-and-version, call-maven-test, maven-deploy-staging, renew-javadoc]
    runs-on: ubuntu-latest
    concurrency:
      group: delivery-staging-${{ github.sha }}
    steps:
    - uses: actions/checkout@v3
      with:
        ref: ${{ github.ref_name }}
    - env:
        GITHUB_TOKEN: ${{ secrets.BOT_ACTION_TOKEN }}
      run: |
        gh pr create --base master --head ${{ github.ref_name }} --assignee "@me" --fill
